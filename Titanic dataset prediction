{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.metrics import mean_absolute_error, accuracy_score, f1_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:07:13.648409Z","iopub.execute_input":"2025-08-22T05:07:13.648752Z","iopub.status.idle":"2025-08-22T05:07:13.658602Z","shell.execute_reply.started":"2025-08-22T05:07:13.648729Z","shell.execute_reply":"2025-08-22T05:07:13.657435Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n\n#cleaning up data for processing\ncolumns_to_drop = ['Name', 'Ticket', 'Cabin']\nembarked_map = {'S': 0, 'C': 1, 'Q': 2}\n\ntrain_data.drop(columns=columns_to_drop, axis=1, inplace=True)\n\nage_mean = train_data['Age'].mean()\ntrain_data['Age'] = train_data['Age'].fillna(age_mean)\n\nembarked = train_data['Embarked'].mode()[0]\ntrain_data['Embarked'] = train_data['Embarked'].fillna(embarked)\n\ntrain_data = pd.get_dummies(train_data, columns=['Sex', 'Embarked'])\n\ntrain_data.head","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:07:13.660545Z","iopub.execute_input":"2025-08-22T05:07:13.661163Z","iopub.status.idle":"2025-08-22T05:07:13.708160Z","shell.execute_reply.started":"2025-08-22T05:07:13.661132Z","shell.execute_reply":"2025-08-22T05:07:13.707294Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_data = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n\ntest_data.drop(columns=columns_to_drop, axis=1, inplace=True)\n\ntest_data['Age'] = test_data['Age'].fillna(age_mean)\n\ntest_data['Embarked'] = test_data['Embarked'].fillna(embarked)\n\ntest_data  = pd.get_dummies(test_data,  columns=['Sex', 'Embarked'])\n\nfare_mean = train_data['Fare'].mean()\ntest_data['Fare'] = test_data['Fare'].fillna(fare_mean)\n\ntrain_data, test_data = train_data.align(test_data, join='left', axis=1, fill_value=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:07:13.709141Z","iopub.execute_input":"2025-08-22T05:07:13.709471Z","iopub.status.idle":"2025-08-22T05:07:13.729254Z","shell.execute_reply.started":"2025-08-22T05:07:13.709440Z","shell.execute_reply":"2025-08-22T05:07:13.727866Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features = [col for col in train_data.columns if col not in ['PassengerId','Survived']]\n\ny = train_data[\"Survived\"]\n\nX = train_data[features]\n\ntrain_X, val_X, train_Y, val_Y = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\ndef eval_dt(max_leaf_nodes):\n    model = DecisionTreeClassifier(max_leaf_nodes=max_leaf_nodes, random_state=42)\n    model.fit(train_X, train_Y)\n    preds = model.predict(val_X)\n    return accuracy_score(val_Y, preds)\n\ndef eval_rf(max_leaf_nodes):\n    model = RandomForestClassifier(\n        n_estimators=500,\n        max_leaf_nodes=max_leaf_nodes,\n        max_depth=None,\n        min_samples_split=2,\n        min_samples_leaf=1,\n        class_weight='balanced',\n        random_state=42,\n        n_jobs=-1\n    )\n    model.fit(train_X, train_Y)\n    preds = model.predict(val_X)\n    return accuracy_score(val_Y, preds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:07:13.730313Z","iopub.execute_input":"2025-08-22T05:07:13.730574Z","iopub.status.idle":"2025-08-22T05:07:13.793850Z","shell.execute_reply.started":"2025-08-22T05:07:13.730556Z","shell.execute_reply":"2025-08-22T05:07:13.792856Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"dt_scores = [(k, eval_dt(k)) for k in range(4, 81)]\nrf_scores = [(k, eval_rf(k)) for k in range(4, 81)]\n\nbest_dt = max(dt_scores, key=lambda x: x[1])\nbest_rf = max(rf_scores, key=lambda x: x[1])\nprint(f\"Best DT: {best_dt[0]} leaves, val ACC={best_dt[1]:.4f}\")\nprint(f\"Best RF: {best_rf[0]} leaves, val ACC={best_rf[1]:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:07:13.796121Z","iopub.execute_input":"2025-08-22T05:07:13.796445Z","iopub.status.idle":"2025-08-22T05:09:34.803984Z","shell.execute_reply.started":"2025-08-22T05:07:13.796422Z","shell.execute_reply":"2025-08-22T05:09:34.802798Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"best_rf_model = RandomForestClassifier(\n    n_estimators=500,\n    max_leaf_nodes=best_rf[0],\n    class_weight='balanced',\n    random_state=42,\n    n_jobs=-1\n)\nbest_rf_model.fit(X, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:09:34.804975Z","iopub.execute_input":"2025-08-22T05:09:34.805311Z","iopub.status.idle":"2025-08-22T05:09:36.428818Z","shell.execute_reply.started":"2025-08-22T05:09:34.805289Z","shell.execute_reply":"2025-08-22T05:09:36.427869Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_X = test_data[features]\npredictions = best_rf_model.predict(test_X)\n\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-22T05:09:36.429918Z","iopub.execute_input":"2025-08-22T05:09:36.430210Z","iopub.status.idle":"2025-08-22T05:09:36.702640Z","shell.execute_reply.started":"2025-08-22T05:09:36.430188Z","shell.execute_reply":"2025-08-22T05:09:36.701246Z"}},"outputs":[],"execution_count":null}]}